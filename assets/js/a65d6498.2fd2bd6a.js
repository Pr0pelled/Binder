"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[755],{28580:e=>{e.exports=JSON.parse('{"functions":[{"name":"Start","desc":"Start the BinderObject.\\n\\n:::tip NOTE\\nIf `autostart` is `true` when creating the binder, this happens automatically.\\n:::","params":[],"returns":[{"desc":"Whether or not the process was successful","lua_type":"boolean"}],"function_type":"method","tags":["Object Methods"],"source":{"line":70,"path":"src/init.lua"}},{"name":"GetTag","desc":"Returns the name of the tag used by the binder.","params":[],"returns":[{"desc":"The name of the tag","lua_type":"string"}],"function_type":"method","tags":["Object Methods"],"source":{"line":101,"path":"src/init.lua"}},{"name":"GetConstructor","desc":"Returns the constructor used to create classes for the binder.","params":[],"returns":[{"desc":"The constructor","lua_type":"function"}],"function_type":"method","tags":["Object Methods"],"source":{"line":112,"path":"src/init.lua"}},{"name":"GetClassAddedSignal","desc":"Returns a signal which is fired every time a class is bound.","params":[],"returns":[{"desc":"","lua_type":"Signal"}],"function_type":"method","tags":["Object Methods"],"source":{"line":123,"path":"src/init.lua"}},{"name":"GetClassRemovingSignal","desc":"Returns a signal which is fired every time a class is being unbound.\\n\\n:::caution\\nIf any functions connected to this signal yields, it will yield the removal of the class.\\n:::","params":[],"returns":[{"desc":"","lua_type":"Signal"}],"function_type":"method","tags":["Object Methods"],"source":{"line":145,"path":"src/init.lua"}},{"name":"GetClassRemovedSignal","desc":"Returns a signal which is fired every time a class has been unbound.","params":[],"returns":[{"desc":"","lua_type":"Signal"}],"function_type":"method","tags":["Object Methods"],"source":{"line":163,"path":"src/init.lua"}},{"name":"Get","desc":"Returns the class bound to the given instance if it exists.","params":[{"name":"inst","desc":"The instance to be used","lua_type":"Instance"}],"returns":[{"desc":"The bound class","lua_type":"table?"}],"function_type":"method","tags":["Object Methods"],"source":{"line":182,"path":"src/init.lua"}},{"name":"GetAll","desc":"Returns a table containing all bound classes.\\n\\n:::tip NOTE\\nThe returned table is not the same as the internally used one, so it can be edited without worry of breaking the binder.\\n:::","params":[],"returns":[{"desc":"A new table containing all bound classes","lua_type":"table"}],"function_type":"method","tags":["Object Methods"],"source":{"line":197,"path":"src/init.lua"}},{"name":"GetAllInstances","desc":"Returns a table containing all bound instances.\\n\\n:::tip NOTE\\nThe returned table is not the same as the internally used one, so it can be edited without worry of breaking the binder.\\n:::","params":[],"returns":[{"desc":"A new table containing all bound instances","lua_type":"table"}],"function_type":"method","tags":["Object Methods"],"source":{"line":216,"path":"src/init.lua"}},{"name":"Bind","desc":"Binds the given instance.\\n\\n:::danger\\nIf an error is encountered, nothing is returned.\\n:::","params":[{"name":"inst","desc":"The instance to be bound","lua_type":"Instance"}],"returns":[{"desc":"The bound class","lua_type":"table"}],"function_type":"method","tags":["Object Methods"],"source":{"line":236,"path":"src/init.lua"}},{"name":"Unbind","desc":"Unbind the given instance and destroy the associated class.\\n\\n:::caution\\nIf there is no `:Destroy()` method of the class, there may be memory leaks.\\n\\nIf the instance is not bound, this will fail.\\n:::","params":[{"name":"inst","desc":"The instance to be unbound","lua_type":"Instance"}],"returns":[{"desc":"Whether the class was successfully unbound","lua_type":"boolean"}],"function_type":"method","tags":["Object Methods"],"source":{"line":264,"path":"src/init.lua"}},{"name":"Destroy","desc":"Cleans up the binder and destroys it\\n\\n:::caution\\nIf the bound classes do not have a `:Destroy()` method, there may be memory leaks\\n:::","params":[],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","tags":["Object Methods"],"source":{"line":294,"path":"src/init.lua"}},{"name":"new","desc":"Constructs a new `Binder`.\\n\\n:::tip NOTE\\nIf you wish to pass constructor arguments, you must also pass a value for `autostart`.\\n:::\\n\\n```LUA\\nlocal function binderConstructor(arg)\\n\\tprint(\\"MyObject has added a new Instance!\\", arg)\\n\\t\\n\\treturn {\\n\\t\\t--your class\\n\\t}\\nend\\n\\nBinder.new(\\"MyObject\\", binderConstructor, true, \\"Yay!\\")\\n```","params":[{"name":"tagName","desc":"The name of the `CollectionService` tag to be used","lua_type":"string"},{"name":"constructor","desc":"The function to run when a new instance containing the tag is created","lua_type":"function"},{"name":"autostart","desc":"Dictates whether or not to automatically start the binder. DEFAULT: true","lua_type":"boolean"},{"name":"...","desc":"Arguments to be passed to the constructor","lua_type":"any?"}],"returns":[{"desc":"","lua_type":"BinderObject"}],"function_type":"static","tags":["Constructors"],"source":{"line":403,"path":"src/init.lua"}},{"name":"is","desc":"Returns whether or not the given object is a `Binder`.","params":[{"name":"object","desc":"The object being checked","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","tags":["Class Methods"],"source":{"line":454,"path":"src/init.lua"}}],"properties":[],"types":[],"name":"Binder","desc":"Bind classes to Roblox Instances using CollectionService","source":{"line":53,"path":"src/init.lua"}}')}}]);